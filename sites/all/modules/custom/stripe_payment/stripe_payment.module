<?php


/**
 * Implements hook_permission().
 */
function stripe_payment_permission() {
    return array(
        'administer stripe payment' => array(
            'title' => t('Administer Stripe Payment module'),
            'description' => t('Perform administration tasks for Stripe Payment module.'),
        ),
        'access stripe payment form' => array(
            'title' => t('Access Stripe Payment blocks'),
            'description' => t('View blocks generated by the Stripe Payment module.'),
        ),
    );
}


/**
 * Implements hook_menu().
 */
function stripe_payment_menu() {

    $items['stripe-payment-page/plan'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('stripe_payment_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

  $items['stripe-payment-page/planlink'] = array(
    'page callback' => 'stripe_payment_linkmore',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
    return $items;
}

function stripe_payment_linkmore()
{
  module_load_include('inc', 'popup', 'includes/popup.api');
// I have inluded the php file for the popup

  return 'Please pay ' . popup(array('form' => 'stripe_payment_form', 'activate' => 'click', 'width' => 950)) ;
}


/**
 * Implements hook_form().
 */
function stripe_payment_form($form, &$form_state, $arg1 = NULL) {

//  Getting the plan argument from the Url

    if (!empty($arg1)) {
        $plan = $arg1;
    }

    if($plan == 'vip')
    {
        $planButton =strtoupper($plan);
    } else {
        $planButton = ucfirst($plan);
    }

    // Attach the javascript from Stripe.
    drupal_add_js('https://js.stripe.com/v1/', 'external');

    // Attach custom javascript to generate stripe token.
    drupal_add_js('sites/all/modules/custom/stripe_payment/js/custom.js', 'file');


    $form['email'] = array(
        '#suffix' => '<p class="payment-errors bg-danger"></p>',
        '#type' => 'textfield',
        '#title' => 'Email',
        '#name' => 'email',
        '#attributes' => array(
            'autocomplete' => 'off',
            'placeholder' => 'Email Address'
        ),
        '#required' => TRUE,
    );

    $form['number'] = array(
        '#type' => 'textfield',
        '#title' => 'Card Number',
        '#size' => 16,
        '#maxlength' => 16,
        '#attributes' => array(
            'data-stripe' => 'number',
            'autocomplete' => 'off',
            'placeholder' => 'CARD NUMBER'
        ),
        '#required' => TRUE,
    );

    $form['cvc'] = array(
        '#type' => 'textfield',
        '#title' => 'CVC',
        '#size' => 4,
        '#maxlength' => 4,
        '#attributes' => array(
            'data-stripe' => 'cvc',
            'autocomplete' => 'off',
            'placeholder' => 'CVC'
        ),
        '#required' => TRUE,
    );

    $form['exp-month'] = array(
        '#type' => 'textfield',
        '#title' => 'Expiry Month',
        '#size' => 2,
        '#maxlength' => 2,
        '#attributes' => array(
            'data-stripe' => 'exp-month',
            'autocomplete' => 'off',
            'placeholder' => 'MM'
        ),
        '#required' => TRUE,
    );

    $form['exp-year'] = array(
        '#type' => 'textfield',
        '#title' => 'Expiry Year',
        '#size' => 4,
        '#maxlength' => 4,
        '#attributes' => array(
            'data-stripe' => 'exp-year',
            'autocomplete' => 'off',
            'placeholder' => 'YYYY'
        ),
        '#required' => TRUE,
    );

    $form['stripeToken'] = array(
        '#type' => 'hidden',
        '#attributes' => array(
            'id' => 'stripeToken'
        ),
    );

    $form['plan'] = array(
        '#type' => 'hidden',
        '#attributes' => array(
            'value' => $plan,
        ),
    );

    $form['submit_button'] = array(
        '#type' => 'submit',
        '#value' => t('Start '.$planButton.' Plan'),
    );

    return $form;
}


/**
 * Implements hook_libraries_info().
 */
function stripe_payment_libraries_info()
{
    $libraries['stripe'] = array(
        'name' => 'Stripe Payment API PHP Library',
        'vendor url' => 'https://stripe.com/docs/libraries',
        'download url' => 'https://stripe.com/docs/libraries#php-library',
        'version arguments' => array(
            'file' => 'VERSION',
            'pattern' => '/([0-9a-zA-Z\.-]+)/',
            'lines' => 1,
        ),
        'files' => array('php' => array('lib/Stripe.php')),
        'callbacks' => array('post-load' => array('stripe_payment_libraries_postload_callback')),
    );
    return $libraries;
}


/**
 * Setting the secret key of Stripe.
 */
function stripe_payment_libraries_postload_callback($library, $version = NULL, $variant = NULL) {
    if (!empty($library['loaded'])) {
        Stripe::setApiKey('sk_test_n3rFohTOjpOWQC87JErk4pjB');
    }
}


/**
 * Submit callback for the stripe_payment form.
 */
function stripe_payment_form_submit($form, &$form_state) {

    if($form_state['values']['plan'] == 'standard'){
        $amt = 149;
    }
    else if($form_state['values']['plan']  == 'professional'){
        $amt = 249;
    }

    else if($form_state['values']['plan'] == 'vip'){
        $amt = 349;
    }

    // Charge the Customer Card using Stripe API.
    if (($library = libraries_load('stripe')) && !empty($library['loaded'])) {
        try {
            $charge = Stripe_Customer::create(array(
                    'email' => $form_state['values']['email'],
                    "plan" => $form_state['values']['plan'],
                    "source" => $form_state['values']['stripeToken'],
                    "description" => "Test Charge from " . variable_get('site_name', 'My Drupal Site'))
            );
            drupal_set_message("Success! Card was successfully charged for the amount of $".$amt.". Thank you! ");
        }
        catch (Exception $e) {
            form_set_error('', $e->getMessage());
            $form_state['rebuild'] = TRUE;
            return;
        }
    }
}
